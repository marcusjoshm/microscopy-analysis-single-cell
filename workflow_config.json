{
  "name": "Microscopy Single-Cell Analysis Workflow",
  "version": "1.0.0",
  "description": "Complete workflow for analyzing microscopy data with different conditions and timepoints",
  "imagej_path": "/Applications/Fiji.app/Contents/MacOS/ImageJ-macosx",
  "steps": [
    {
      "name": "prepare_input_structure",
      "type": "bash",
      "path": "scripts/prepare_input_structure.sh",
      "args": ["{input_dir}"],
      "description": "Standardize input directory structure for LASX-exported data"
    },
    {
      "name": "select_datatype",
      "type": "manual",
      "instructions": "Select the type of data: single_timepoint or multi_timepoint. You can specify the datatype when running the script with the --datatype option.",
      "description": "Select the data type (single or multiple timepoints)"
    },
    {
      "name": "select_condition",
      "type": "manual",
      "instructions": "Review available conditions: {conditions_list}. Select the conditions to analyze. You can specify conditions when running the script with the --conditions option.",
      "description": "Select specific conditions for analysis"
    },
    {
      "name": "select_timepoints",
      "type": "manual",
      "instructions": "Review available timepoints in the raw data and decide which timepoints to use for analysis. Current experiment has timepoints: {timepoints_list}. Press Enter when you have made your selection. You can specify timepoints when running the script with --timepoints option.",
      "description": "Select specific timepoints for analysis"
    },
    {
      "name": "select_regions",
      "type": "manual",
      "instructions": "Review available regions in the raw data and decide which regions to use for analysis. Current experiment has regions: {regions_list}. Press Enter when you have made your selection. You can specify regions when running the script with --regions option.",
      "description": "Select specific regions for analysis"
    },
    {
      "name": "select_channels",
      "type": "manual",
      "instructions": "Review available channels: {channels_list}. Select the channels to analyze. You can specify channels when running the script with the --channels option.",
      "description": "Select specific channels for analysis"
    },
    {
      "name": "bin_images_for_segmentation",
      "type": "python",
      "path": "scripts/bin_images.py",
      "args": [
        "--input", "{output_dir}/raw_data", 
        "--output", "{output_dir}/preprocessed",
        "--conditions", "{conditions}",
        "--regions", "{regions}",
        "--timepoints", "{timepoints}",
        "--channels", "{channels}",
        "--verbose"
      ],
      "description": "Bin images 4x4 for cell segmentation using Python"
    },
    {
      "name": "interactive_segmentation",
      "type": "bash",
      "path": "scripts/launch_segmentation_tools.sh",
      "args": ["{output_dir}/preprocessed"],
      "description": "Launch Cellpose and FIJI for interactive cell segmentation"
    },
    {
      "name": "roi_tracking",
      "type": "python",
      "path": "scripts/track_rois.py",
      "args": [
        "--input", "{output_dir}/preprocessed", 
        "--timepoints", "{timepoints}",
        "--recursive" 
      ],
      "description": "Track cells by matching ROIs between time points"
    },
    {
      "name": "resize_rois",
      "type": "python",
      "path": "scripts/resize_rois.py",
      "args": ["--input", "{output_dir}/preprocessed", "--output", "{output_dir}/ROIs", "--imagej", "{imagej_path}", "--auto-close"],
      "description": "Resize ROIs from binned images to match original image dimensions"
    },
    {
      "name": "extract_cells",
      "type": "python",
      "path": "scripts/extract_cells.py",
      "args": ["--roi-dir", "{output_dir}/ROIs", "--raw-data-dir", "{output_dir}/raw_data", "--output-dir", "{output_dir}/cells", "--imagej", "{imagej_path}", "--auto-close"],
      "description": "Extract individual cells using ROIs and save as separate files"
    },
    {
      "name": "group_cells",
      "type": "python",
      "path": "scripts/group_cells.py",
      "args": ["--cells-dir", "{output_dir}/cells", "--output-dir", "{output_dir}/grouped_cells", "--bins", "3", "--force-clusters"],
      "description": "Group cells by expression level and create summed images",
      "notes": "Optional parameters available: '--clustering-method kmeans' to use K-means instead of GMM, '--force-clusters' to ensure all bin groups are created even with similar data"
    },
    {
      "name": "threshold_grouped_cells",
      "type": "python",
      "path": "scripts/otsu_threshold_grouped_cells.py",
      "args": ["--input-dir", "{output_dir}/grouped_cells", "--output-dir", "{output_dir}/grouped_masks", "--imagej", "{imagej_path}"],
      "description": "Threshold grouped cell images to create masks"
    },
    {
      "name": "combine_masks",
      "type": "python",
      "path": "scripts/combine_masks.py",
      "args": ["--input-dir", "{output_dir}/grouped_masks", "--output-dir", "{output_dir}/combined_masks"],
      "description": "Combine mask images from different bin groups into single masks"
    },
    {
      "name": "create_cell_masks",
      "type": "python",
      "path": "scripts/create_cell_masks.py",
      "args": ["--roi-dir", "{output_dir}/ROIs", "--mask-dir", "{output_dir}/combined_masks", "--output-dir", "{output_dir}/masks", "--imagej", "{imagej_path}", "--auto-close"],
      "description": "Create individual cell masks by applying ROIs to combined masks"
    },
    {
      "name": "analyze_cell_masks",
      "type": "python",
      "path": "scripts/analyze_cell_masks.py",
      "args": ["--input", "{output_dir}/masks", "--output", "{output_dir}/analysis", "--regions", "{regions}", "--timepoints", "{timepoints}", "--imagej", "{imagej_path}"],
      "description": "Analyze cell masks using ImageJ and extract measurements"
    }
  ]
}